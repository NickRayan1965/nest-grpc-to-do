syntax = "proto3";
import "google/protobuf/any.proto";
package todo;
service TaskCategoryService {
  rpc FindOneTaskCategory(IFindOneTaskCategoryDto) returns (ITaskCategoryResponse);
  rpc FindAllTaskCategories(IFindAllTaskCategoriesDto) returns ( ITaskCategoryListResponse);
  rpc CreateTaskCategory(ICreateTaskCategoryDto) returns (ITaskCategoryResponse);
  rpc UpdateTaskCategory(IUpdateTaskCategoryDto) returns (ITaskCategoryResponse);
  rpc DeleteTaskCategory(IFindOneTaskCategoryDto) returns (ITaskCategoryResponse);
  rpc RestoreTaskCategory(IFindOneTaskCategoryDto) returns (ITaskCategoryResponse);
}
service TaskService {
  rpc FindOneTask(IFindOneTaskDto) returns (ITaskResponse);
  rpc FindAllTasks(IFindAllTasksDto) returns (ITaskListResponse);
  rpc CreateTask(ICreateTaskDto) returns (ITaskResponse);
  rpc UpdateTask(IUpdateTaskDto) returns (ITaskResponse);
  rpc DeleteTask(IFindOneTaskDto) returns (ITaskResponse);
}
//<<Task>>
message ITask{
  string _id = 1;
  string userId = 2;
  string name = 3;
  string description = 4;
  string expiration = 5;
  string createdAt = 6;
  string priority = 7;
  string status = 8;
  repeated ITaskCategory categories = 9;
}
message ICreateTaskDto {
  string name = 1;
  optional string description = 2;
  string expiration = 3;
  string priority = 4;
  string userId = 5;
  repeated string categoryIds = 6;
}

message IUpdateTaskDto {
  string _id = 1;
  optional string name = 2;
  optional string description = 3;
  optional string expiration = 4;
  optional string priority = 5;
  repeated string categoryIds = 6;
  string userId = 7;
}
message IFindOneTaskDto {
  string _id = 1;
  string userId = 2;
}
message IFindAllTasksDto {
  string userId = 1;
  optional string filterByContent = 2;
  optional string expiration = 3;
  optional string priority = 4;
  optional string status = 5;
  optional int32 page = 6;
  optional int32 pageSize = 7;
  repeated string categoryIds = 8;
}
message ITaskResponse {
  ITask data = 1;
  IMetaResponse meta = 2;
}
message ITaskListResponse {
  repeated ITask data = 1;
  IPaginationResponse pagination = 2;
  IMetaResponse meta = 3;
}

// <<Task>>

message ITaskCategory {
  string _id = 1;
  string name = 2;
  string userId = 3;
}
message IFindAllTaskCategoriesDto {
  string userId = 1;
  optional string name = 2;
}


// Response One
message ITaskCategoryResponse {
  ITaskCategory data = 1;
  IMetaResponse meta = 2;
}

message IPaginationResponse {
  int32 total_count = 1;
  optional int32 pageSize = 2;
  optional int32 page = 3;
}
// Meta Response
//
message IMetaResponse {
  int32 statusCode = 1;
  string message = 2;
  //any errors
  optional google.protobuf.Any errors = 3;
}

// Response List
message ITaskCategoryListResponse {
  repeated ITaskCategory data = 1;
  IPaginationResponse pagination = 2;
  IMetaResponse meta = 3;
}

// Pagination Response


// Find One
message IFindOneTaskCategoryDto {
  string id = 1;
  string userId = 2;
}

// Create
message ICreateTaskCategoryDto {
  string name = 1;
  string userId = 2;
}
// Update
message IUpdateTaskCategoryDto {
  string id = 1;
  string userId = 2;
  optional string name = 3;
}
// Restore
message IRestoreTaskCategoryDto {
  string id = 1;
  string userId = 2;
}



